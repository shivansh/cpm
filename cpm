#!/usr/bin/env bash

#        *--------------------------------*
#        | It is as BAD as you think, and |
#        | they ARE out to get you.       |
#        *--------------------------------*
#                o   ^__^
#                 o  (OO)\_______
#                    (__)\       )\/\
#                        ||----w |
#                        ||     ||

set -e
server="https://raw.githubusercontent.com/shivrai/cpm/master"   # Marketplace, all the deals happen here
barn="$HOME/cpm"  # This is where your cows reside in peace
fetch_index=0     # Flipped when user wants to update his entire barn
clobber=0         # Flipped when user wants to have multiple similar cows
TIMEOUT=2         # Sleep timeout duration (in seconds)
EXITSTATUS=0

trap cleanup SIGINT SIGTERM SIGHUP

cleanup() {
  rm -f new_cow_index
  rm -f cow_diff
  exit $EXITSTATUS
}

# Walk up to your barn, the cows cannot use telecommunication yet!!
# cd $barn

# Make sure you follow protocol while requesting cows...they can be stubborn sometimes.
if [ "$1" != "fetch" ]; then
  moo="Usage: ./cpm fetch <cow>"
  echo "$moo" | cowsay
  exit 1
fi

# The default cow (atleast) is required for mooing out logs.
# Plus, what use is a barn if there is not even a single cow in it ?
if [ ! -f "cows/default.cow" ]; then
  if ( cd cows && wget "$server/cows/default.cow" -o "$barn/cow-debug.log" ); then
    sleep $TIMEOUT
    moo="
    *--------------------------------------*
    | Cannot fetch cows at the moment.     |
    | View cow-debug.log for more details. |
    *--------------------------------------*
                 @ @
                @
               []___
              /    /\____
        (~)  /_/\_//____/\\
         |   | || |||__|||
    "
    echo "$moo"
    exit 1
  fi
fi

# Brings the requested cow right into your barn.
fetch_cow() {
  if ! ( cd cows && wget "$server/cows/$cow" -o "$barn/cow-debug.log" )
  then
    if [ $clobber -eq 0 ]; then
      moo="Sadly no cow with the name '$cow' exists."
    elif [ $clobber -eq 1 ]; then
      moo="Unable to fetch cow. View cow-debug.log for more details."
    fi
    echo "$moo" | cowsay -d
    EXITSTATUS=1 && cleanup
  elif [ $fetch_index -ne 1 ]; then
      moo="Enjoy your new holy cow !!"
      echo "$moo" | cowsay -f "$cow"
  fi
}

# Lures all the fancy new cows in the market.
update_barn() {
  fetch_index=1
  echo "Updating your barn..."
  # Add a timeout just to make things more interesting and lifelike (who says they are not ??)
  sleep $TIMEOUT
  if ! wget "$server/cow_index" -O new_cow_index -o "$barn/cow-debug.log"
  then
    echo "Unable to update index at the moment !! View cow-debug.log for more details." | cowsay -e "oO";
    EXITSTATUS=0 && cleanup
  else
    # First get hold of the cows you currently have.
    # Cows sometimes flee (bad barn maybe ?), hence it is best practice to generate a fresh new index.
    rm -f cow_index
    ls cows > cow_index
    # Find out which cows are new in the market (or the ones which went missing)!!
    diff cow_index new_cow_index | grep '>' | cut -c 3- > cow_diff
    # In case your barn is up to date.
    if [ ! -s cow_diff ]; then
      moo="Seems like your barn is already up to date. Gotta say, Good Job !!"
      echo "$moo" | cowsay -e "-O"
      EXITSTATUS=1 && cleanup
    fi
    echo "Luring new cows..."
    sleep $TIMEOUT
    while IFS='' read -r new_cow; do
      cow="$new_cow"
      fetch_cow
    done< "cow_diff"
    ( echo -e "These cows were added to your barn ⇒  \n" && cat cow_diff ) | cowsay
    # Update the cow_index
    mv -f new_cow_index cow_index
    EXITSTATUS=0 && cleanup
  fi
}

if [ ! -z "$2" ]; then
  cow="$2.cow"
else
  update_barn
fi

# Real magic happens here !!
if [ -f "cows/$cow" ]; then
  read -r -p "A cow with the same name already exists, continue? (y/n) " yn
  case $yn in
    [n] ) exit;;
    [y] ) echo "Just a reminder ⇒ studies show that similar cows tend to fight more !!";
          clobber=1; sleep $TIMEOUT;
          fetch_cow;;
    [*] ) echo "Invalid option..."
  esac
else
  echo "Luring the cow you requested..."
  sleep $TIMEOUT
  fetch_cow
fi
